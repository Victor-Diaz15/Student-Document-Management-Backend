// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentDocumentManagement.Infrastructure.Persistence.Contexts;

#nullable disable

namespace StudentDocumentManagement.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(MainDbContext))]
    partial class MainDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StudentDocumentManagement.Core.Domain.Entities.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ApplicationId");

                    b.Property<bool>("Borrado")
                        .HasColumnType("bit");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("Applications", (string)null);
                });

            modelBuilder.Entity("StudentDocumentManagement.Core.Domain.Entities.ApplicationStudentFile", b =>
                {
                    b.Property<Guid>("StudentFileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StudentFileId", "ApplicationId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationsStudentFiles", (string)null);
                });

            modelBuilder.Entity("StudentDocumentManagement.Core.Domain.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ServiceId");

                    b.Property<bool>("Borrado")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("ServiceType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Services", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("21f6fed9-9fa6-4476-9f22-7d630fb3cec7"),
                            Borrado = false,
                            Name = "Legalización Completa",
                            Price = 650,
                            ServiceType = 0
                        },
                        new
                        {
                            Id = new Guid("197e5630-d2d0-4699-845a-11a78d25a569"),
                            Borrado = false,
                            Name = "Copia Título Legalizada",
                            Price = 150,
                            ServiceType = 0
                        },
                        new
                        {
                            Id = new Guid("53b6a489-b2e4-4ec4-a248-19e7f3999a29"),
                            Borrado = false,
                            Name = "Récord de Nota Legalizada",
                            Price = 200,
                            ServiceType = 0
                        },
                        new
                        {
                            Id = new Guid("25a9a1fe-b559-4168-b6bc-97f677721397"),
                            Borrado = false,
                            Name = "Certificación Título Legalizada",
                            Price = 150,
                            ServiceType = 0
                        },
                        new
                        {
                            Id = new Guid("bad159b3-1582-45a3-a4b9-1bbe736770dd"),
                            Borrado = false,
                            Name = "Carta de Doctorado Especial Legalizada",
                            Price = 250,
                            ServiceType = 0
                        },
                        new
                        {
                            Id = new Guid("26214a95-18c5-4f18-b936-bbe7cfe72d46"),
                            Borrado = false,
                            Name = "Legalización Completa",
                            Price = 650,
                            ServiceType = 1
                        },
                        new
                        {
                            Id = new Guid("1b06e340-5eee-427d-b0a7-063e17464dc1"),
                            Borrado = false,
                            Name = "Copia Título Legalizada",
                            Price = 150,
                            ServiceType = 1
                        },
                        new
                        {
                            Id = new Guid("4999cfc4-661b-48ed-bc60-41f07a855a36"),
                            Borrado = false,
                            Name = "Récord de Nota Legalizada",
                            Price = 200,
                            ServiceType = 1
                        },
                        new
                        {
                            Id = new Guid("8d11c889-679f-4d38-854e-9755df726632"),
                            Borrado = false,
                            Name = "Certificación Título Legalizada",
                            Price = 150,
                            ServiceType = 1
                        },
                        new
                        {
                            Id = new Guid("d41173e3-cf37-48dd-898a-9bb6bf65a54a"),
                            Borrado = false,
                            Name = "Carta de Doctorado Especial Legalizada",
                            Price = 250,
                            ServiceType = 1
                        });
                });

            modelBuilder.Entity("StudentDocumentManagement.Core.Domain.Entities.StudentFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StudentFileId");

                    b.Property<bool>("Borrado")
                        .HasColumnType("bit");

                    b.Property<int?>("FileType")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StudentFiles", (string)null);
                });

            modelBuilder.Entity("StudentDocumentManagement.Core.Domain.Entities.Application", b =>
                {
                    b.HasOne("StudentDocumentManagement.Core.Domain.Entities.Service", "Service")
                        .WithMany("Applications")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("StudentDocumentManagement.Core.Domain.Entities.ApplicationStudentFile", b =>
                {
                    b.HasOne("StudentDocumentManagement.Core.Domain.Entities.Application", "Application")
                        .WithMany("Files")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("StudentDocumentManagement.Core.Domain.Entities.StudentFile", "StudentFile")
                        .WithMany("ApplicationsFiles")
                        .HasForeignKey("StudentFileId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("StudentFile");
                });

            modelBuilder.Entity("StudentDocumentManagement.Core.Domain.Entities.Application", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("StudentDocumentManagement.Core.Domain.Entities.Service", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("StudentDocumentManagement.Core.Domain.Entities.StudentFile", b =>
                {
                    b.Navigation("ApplicationsFiles");
                });
#pragma warning restore 612, 618
        }
    }
}
